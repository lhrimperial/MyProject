<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 分片池  BEGIN-->
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.host}"/>
                    <constructor-arg index="1" value="${redis.port}" type="int"/>
                    <constructor-arg index="2" value="${redis.timeout}" type="int"/>
                    <property name="password" value="${redis.pass}"/>
                </bean>
                <bean class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.host2}"/>
                    <constructor-arg index="1" value="${redis.port2}" type="int"/>
                    <constructor-arg index="2" value="${redis.timeout2}" type="int"/>
                    <property name="password" value="${redis.pass2}"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>
    <!-- 连接池配置 最大空闲数、最大连接数、最长等待时间、连接是否可用 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.maxActive}" />
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.testOnReturn}"/>
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
    </bean>
    <!-- 分片池  END-->

    <bean id="redisClient" class="com.ifarm.frame.database.nosql.redis.RedisClient">
        <property name="shardedJedisPool" ref="shardedJedisPool"/>
    </bean>

    <bean id="redisCacheStore" class="com.ifarm.frame.database.nosql.redis.store.RedisCacheStore">
        <property name="client" ref="redisClient"/>
    </bean>

    <bean id="UserCache" class="com.ifarm.superweb.domain.UserCache">
        <property name="cacheStore" ref="redisCacheStore"/>
    </bean>


    <!-- 单机配置  BENGIN-->
    <!--<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}" />
        <property name="maxWaitMillis" value="${redis.maxWait}" />
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
    </bean>
    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig" />
        <property name="port" value="${redis.port}" />
        <property name="hostName" value="${redis.host}" />
        <property name="password" value="${redis.password}" />
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>-->
</beans>